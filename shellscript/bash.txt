debug
debugger
dump-po-strings
dump-strings
help
init-file
login
noediting
noprofile
norc
posix
protected
rcfile
restricted
verbose
version
wordexp
bin/sh
Unix2003
POSIXLY_CORRECT
POSIX_PEDANTIC
_BASH_IMPLICIT_DASH_PEE
setuid(%u) failed: %s
setreuid(%u,%u) failed: %s
%s: option requires an argument
TERM
emacs
EMACS
term
dumb
rbash
PATH
SHELL
BASH_ENV
I have no name!
~/.bashrc
%s: invalid option
%c%c: invalid option
SSH_CLIENT
SSH2_CLIENT
/etc/profile
~/.profile
~/.bash_profile
~/.bash_login
run_wordexp
--wordexp
run_one_command
/usr/local/share/bashdb/bashdb-main.inc
FUNCNAME
BASH_SOURCE
BASH_LINENO
main
%s: is a directory
%s: cannot execute binary file
bash
??host??
\s-\v\$ 
GNU bash, version %s-(%s)
x86_64-apple-darwin15
Usage:
%s [GNU long option] [option] ...
%s [GNU long option] [option] script-file ...
GNU long options:
--%s
Shell options:
-irsD or -c command or -O shopt_option
(invocation only)
-%s or -o option
Type `%s -c "help set"' for more information about shell options.
Type `%s -c help' for more information about shell builtin commands.
Use the `bashbug' command to report bugs.
getcwd: cannot access parent directories
%s%s
`%s': not a valid identifier
/dev/tty
HOME
OLDPWD
;|&(
;|&()
bad array subscript
array assign
%s: cannot assign to non-numeric index
%s[%s: %s
[%s]: %s
%s=%s
'()'
;&()|<>
histchars
HISTCONTROL
HISTIGNORE
HISTSIZE
HISTFILESIZE
HISTFILE
%s: cannot create: %s
%s%s%s
comment-begin
Bash
shell-expand-line
history-expand-line
magic-space
alias-expand-line
history-and-alias-expand-line
insert-last-argument
operate-and-get-next
display-shell-version
edit-and-execute-command
complete-into-braces
complete-filename
possible-filename-completions
complete-username
possible-username-completions
complete-hostname
possible-hostname-completions
complete-variable
possible-variable-completions
complete-command
possible-command-completions
glob-complete-word
glob-expand-word
glob-list-expansions
dynamic-complete-history
\"'@<>=;|&()#$`?*[!:{
completion-ignore-case
%s: missing colon separator
HOSTFILE
hostname_completion_file
/etc/hosts
$include 
fc -e vi
fc -e "${VISUAL:-${EDITOR:-vi}}"
%s %d
C-xC-e
fc -e "${VISUAL:-${EDITOR:-emacs}}"
;|&{(`
()<>;&| 
FIGNORE
symlink-hook
%s: first non-whitespace character is not `"'
no closing `%c' in %s
bash_execute_unix_command: cannot find keymap for command
bash_execute_unix_command
`%s': invalid alias name
alias 
bind_builtin
lvpVPsSf:q:u:m:r:x:
`%s': invalid keymap name
%s: cannot read: %s
`%s': cannot unbind
`%s': unknown function name
%s is not bound to any keys.
%s can be invoked via 
"%s"%s
loop count
only meaningful in a `for', `while', or `until' loop
alias
alias [-p] [name[=value] ... ]
unalias
unalias [-a] name [name ...]
bind
bind [-lpvsPVS] [-m keymap] [-f filename] [-q name] [-u name] [-r keyseq] [-x keyseq:shell-command] [keyseq:readline-function or readline-command]
break
break [n]
continue
continue [n]
builtin
builtin [shell-builtin [arg ...]]
caller
caller [EXPR]
cd [-L|-P] [dir]
pwd [-LP]
true
false
command
command [-pVv] command [arg ...]
declare
declare [-afFirtx] [-p] [name[=value] ...]
typeset
typeset [-afFirtx] [-p] name[=value] ...
local
local name[=value] ...
echo
echo [-neE] [arg ...]
enable
enable [-pnds] [-a] [-f filename] [name ...]
eval
eval [arg ...]
getopts
getopts optstring name [arg]
exec
exec [-cl] [-a name] file [redirection ...]
exit
exit [n]
logout
fc [-e ename] [-nlr] [first] [last] or fc -s [pat=rep] [cmd]
fg [job_spec]
bg [job_spec ...]
hash
hash [-lr] [-p pathname] [-dt] [name ...]
help [-s] [pattern ...]
history
history [-c] [-d offset] [n] or history -awrn [filename] or history -ps arg [arg...]
jobs
jobs [-lnprs] [jobspec ...] or jobs -x command [args]
disown
disown [-h] [-ar] [jobspec ...]
kill
kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
let arg [arg ...]
read
read [-ers] [-u fd] [-t timeout] [-p prompt] [-a array] [-n nchars] [-d delim] [name ...]
return
return [n]
set [--abefhkmnptuvxBCHP] [-o option] [arg ...]
unset
unset [-f] [-v] [name ...]
export
export [-nf] [name[=value] ...] or export -p
readonly
readonly [-af] [name[=value] ...] or readonly -p
shift
shift [n]
source
source filename [arguments]
. filename [arguments]
suspend
suspend [-f]
test
test [expr]
[ arg... ]
times
trap
trap [-lp] [arg signal_spec ...]
type
type [-afptP] name [name ...]
ulimit
ulimit [-SHacdfilmnpqstuvx] [limit]
umask
umask [-p] [-S] [mode]
wait
wait [n]
for NAME [in WORDS ... ;] do COMMANDS; done
for ((
for (( exp1; exp2; exp3 )); do COMMANDS; done
select
select NAME [in WORDS ... ;] do COMMANDS; done
time
time [-p] PIPELINE
case
case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac
if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi
while
while COMMANDS; do COMMANDS; done
until
until COMMANDS; do COMMANDS; done
function
function NAME { COMMANDS ; } or NAME () { COMMANDS ; }
{ ... }
{ COMMANDS ; }
JOB_SPEC [&]
(( ... ))
(( expression ))
[[ ... ]]
[[ expression ]]
variables
variables - Some variable names and meanings
pushd
pushd [dir | +N | -N] [-n]
popd
popd [+N | -N] [-n]
dirs
dirs [-clpv] [+N] [-N]
shopt
shopt [-pqsu] [-o long-option] optname [optname...]
printf
printf [-v var] format [arguments]
complete
complete [-abcdefgjksuv] [-pr] [-o option] [-A action] [-G globpat] [-W wordlist] [-P prefix] [-S suffix] [-X filterpat] [-F function] [-C command] [name ...]
compgen
compgen [-abcdefgjksuv] [-o option] [-A action] [-G globpat] [-W wordlist] [-P prefix] [-S suffix] [-X filterpat] [-F function] [-C command] [word]
`alias' with no arguments or with the -p option prints the list
    of aliases in the form alias NAME=VALUE on standard output.
    Otherwise, an alias is defined for each NAME whose VALUE is given.
    A trailing space in VALUE causes the next word to be checked for
    alias substitution when the alias is expanded.  Alias returns
    true unless a NAME is given for which no alias has been defined.
Remove NAMEs from the list of defined aliases.  If the -a option is given,
    then remove all alias definitions.
Bind a key sequence to a Readline function or a macro, or set
    a Readline variable.  The non-option argument syntax is equivalent
    to that found in ~/.inputrc, but must be passed as a single argument:
    bind '"\C-x\C-r": re-read-init-file'.
    bind accepts the following options:
      -m  keymap         Use `keymap' as the keymap for the duration of this
                         command.  Acceptable keymap names are emacs,
                         emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move,
                         vi-command, and vi-insert.
      -l                 List names of functions.
      -P                 List function names and bindings.
      -p                 List functions and bindings in a form that can be
                         reused as input.
      -r  keyseq         Remove the binding for KEYSEQ.
      -x  keyseq:shell-command
Cause SHELL-COMMAND to be executed when
    
KEYSEQ is entered.
      -f  filename       Read key bindings from FILENAME.
      -q  function-name  Query about which keys invoke the named function.
      -u  function-name  Unbind all keys which are bound to the named function.
      -V                 List variable names and values
      -v                 List variable names and values in a form that can
                         be reused as input.
      -S                 List key sequences that invoke macros and their values
      -s                 List key sequences that invoke macros and their values
                         in a form that can be reused as input.
Exit from within a FOR, WHILE or UNTIL loop.  If N is specified,
    break N levels.
Resume the next iteration of the enclosing FOR, WHILE or UNTIL loop.
    If N is specified, resume at the N-th enclosing loop.
Run a shell builtin.  This is useful when you wish to rename a
    shell builtin to be a function, but need the functionality of the
    builtin within the function itself.
Returns the context of the current subroutine call.
    
    Without EXPR, returns "$line $filename".  With EXPR,
    returns "$line $subroutine $filename"; this extra information
    can be used to provide a stack trace.
    
    The value of EXPR indicates how many call frames to go back before the
    current one; the top frame is frame 0.
Change the current directory to DIR.  The variable $HOME is the
    default DIR.  The variable CDPATH defines the search path for
    the directory containing DIR.  Alternative directory names in CDPATH
    are separated by a colon (:).  A null directory name is the same as
    the current directory, i.e. `.'.  If DIR begins with a slash (/),
    then CDPATH is not used.  If the directory is not found, and the
    shell option `cdable_vars' is set, then try the word as a variable
    name.  If that variable has a value, then cd to the value of that
    variable.  The -P option says to use the physical directory structure
    instead of following symbolic links; the -L option forces symbolic links
    to be followed.
Print the current working directory.  With the -P option, pwd prints
    the physical directory, without any symbolic links; the -L option
    makes pwd follow symbolic links.
No effect; the command does nothing.  A zero exit code is returned.
Return a successful result.
Return an unsuccessful result.
Runs COMMAND with ARGS ignoring shell functions.  If you have a shell
    function called `ls', and you wish to call the command `ls', you can
    say "command ls".  If the -p option is given, a default value is used
    for PATH that is guaranteed to find all of the standard utilities.  If
    the -V or -v option is given, a string is printed describing COMMAND.
    The -V option produces a more verbose description.
Declare variables and/or give them attributes.  If no NAMEs are
    given, then display the values of variables instead.  The -p option
    will display the attributes and values of each NAME.
    
    The flags are:
    
      -a
to make NAMEs arrays (if supported)
      -f
to select from among function names only
      -F
to display function names (and line number and source file name if
    
debugging) without definitions
      -i
to make NAMEs have the `integer' attribute
      -r
to make NAMEs readonly
      -t
to make NAMEs have the `trace' attribute
      -x
to make NAMEs export
    
    Variables with the integer attribute have arithmetic evaluation (see
    `let') done when the variable is assigned to.
    
    When displaying values of variables, -f displays a function's name
    and definition.  The -F option restricts the display to function
    name only.
    
    Using `+' instead of `-' turns off the given attribute instead.  When
    used in a function, makes NAMEs local, as with the `local' command.
Obsolete.  See `declare'.
Create a local variable called NAME, and give it VALUE.  LOCAL
    can only be used within a function; it makes the variable NAME
    have a visible scope restricted to that function and its children.
Output the ARGs.  If -n is specified, the trailing newline is
    suppressed.  If the -e option is given, interpretation of the
    following backslash-escaped characters is turned on:
    
alert (bell)
    
backspace
    
suppress trailing newline
    
escape character
    
form feed
    
new line
    
carriage return
    
horizontal tab
    
vertical tab
    
backslash
    
\0nnn
the character whose ASCII code is NNN (octal).  NNN can be
    
0 to 3 octal digits
    
    You can explicitly turn off the interpretation of the above characters
    with the -E option.
Enable and disable builtin shell commands.  This allows
    you to use a disk command which has the same name as a shell
    builtin without specifying a full pathname.  If -n is used, the
    NAMEs become disabled; otherwise NAMEs are enabled.  For example,
    to use the `test' found in $PATH instead of the shell builtin
    version, type `enable -n test'.  On systems supporting dynamic
    loading, the -f option may be used to load new builtins from the
    shared object FILENAME.  The -d option will delete a builtin
    previously loaded with -f.  If no non-option names are given, or
    the -p option is supplied, a list of builtins is printed.  The
    -a option means to print every builtin with an indication of whether
    or not it is enabled.  The -s option restricts the output to the POSIX.2
    `special' builtins.  The -n option displays a list of all disabled builtins.
Read ARGs as input to the shell and execute the resulting command(s).
Getopts is used by shell procedures to parse positional parameters.
    
    OPTSTRING contains the option letters to be recognized; if a letter
    is followed by a colon, the option is expected to have an argument,
    which should be separated from it by white space.
    
    Each time it is invoked, getopts will place the next option in the
    shell variable $name, initializing name if it does not exist, and
    the index of the next argument to be processed into the shell
    variable OPTIND.  OPTIND is initialized to 1 each time the shell or
    a shell script is invoked.  When an option requires an argument,
    getopts places that argument into the shell variable OPTARG.
    
    getopts reports errors in one of two ways.  If the first character
    of OPTSTRING is a colon, getopts uses silent error reporting.  In
    this mode, no error messages are printed.  If an invalid option is
    seen, getopts places the option character found into OPTARG.  If a
    required argument is not found, getopts places a ':' into NAME and
    sets OPTARG to the option character found.  If getopts is not in
    silent mode, and an invalid option is seen, getopts places '?' into
    NAME and unsets OPTARG.  If a required argument is not found, a '?'
    is placed in NAME, OPTARG is unset, and a diagnostic message is
    printed.
    
    If the shell variable OPTERR has the value 0, getopts disables the
    printing of error messages, even if the first character of
    OPTSTRING is not a colon.  OPTERR has the value 1 by default.
    
    Getopts normally parses the positional parameters ($0 - $9), but if
    more arguments are given, they are parsed instead.
Exec FILE, replacing this shell with the specified program.
    If FILE is not specified, the redirections take effect in this
    shell.  If the first argument is `-l', then place a dash in the
    zeroth arg passed to FILE, as login does.  If the `-c' option
    is supplied, FILE is executed with a null environment.  The `-a'
    option means to make set argv[0] of the executed process to NAME.
    If the file cannot be executed and the shell is not interactive,
    then the shell exits, unless the shell option `execfail' is set.
Exit the shell with a status of N.  If N is omitted, the exit status
    is that of the last command executed.
Logout of a login shell.
fc is used to list or edit and re-execute commands from the history list.
    FIRST and LAST can be numbers specifying the range, or FIRST can be a
    string, which means the most recent command beginning with that
    string.
    
       -e ENAME selects which editor to use.  Default is FCEDIT, then EDITOR,
          then vi.
    
       -l means list lines instead of editing.
       -n means no line numbers listed.
       -r means reverse the order of the lines (making it newest listed first).
    
    With the `fc -s [pat=rep ...] [command]' format, the command is
    re-executed after the substitution OLD=NEW is performed.
    
    A useful alias to use with this is r='fc -s', so that typing `r cc'
    runs the last command beginning with `cc' and typing `r' re-executes
    the last command.
Place JOB_SPEC in the foreground, and make it the current job.  If
    JOB_SPEC is not present, the shell's notion of the current job is
    used.
Place each JOB_SPEC in the background, as if it had been started with
    `&'.  If JOB_SPEC is not present, the shell's notion of the current
    job is used.
For each NAME, the full pathname of the command is determined and
    remembered.  If the -p option is supplied, PATHNAME is used as the
    full pathname of NAME, and no path search is performed.  The -r
    option causes the shell to forget all remembered locations.  The -d
    option causes the shell to forget the remembered location of each NAME.
    If the -t option is supplied the full pathname to which each NAME
    corresponds is printed.  If multiple NAME arguments are supplied with
    -t, the NAME is printed before the hashed full pathname.  The -l option
    causes output to be displayed in a format that may be reused as input.
    If no arguments are given, information about remembered commands is displayed.
Display helpful information about builtin commands.  If PATTERN is
    specified, gives detailed help on all commands matching PATTERN,
    otherwise a list of the builtins is printed.  The -s option
    restricts the output for each builtin command matching PATTERN to
    a short usage synopsis.
Display the history list with line numbers.  Lines listed with
    with a `*' have been modified.  Argument of N says to list only
    the last N lines.  The `-c' option causes the history list to be
    cleared by deleting all of the entries.  The `-d' option deletes
    the history entry at offset OFFSET.  The `-w' option writes out the
    current history to the history file;  `-r' means to read the file and
    append the contents to the history list instead.  `-a' means
    to append history lines from this session to the history file.
    Argument `-n' means to read all history lines not already read
    from the history file and append them to the history list.
    
    If FILENAME is given, then that is used as the history file else
    if $HISTFILE has a value, that is used, else ~/.bash_history.
    If the -s option is supplied, the non-option ARGs are appended to
    the history list as a single entry.  The -p option means to perform
    history expansion on each ARG and display the result, without storing
    anything in the history list.
    
    If the $HISTTIMEFORMAT variable is set and not null, its value is used
    as a format string for strftime(3) to print the time stamp associated
    with each displayed history entry.  No time stamps are printed otherwise.
Lists the active jobs.  The -l option lists process id's in addition
    to the normal information; the -p option lists process id's only.
    If -n is given, only processes that have changed status since the last
    notification are printed.  JOBSPEC restricts output to that job.  The
    -r and -s options restrict output to running and stopped jobs only,
    respectively.  Without options, the status of all active jobs is
    printed.  If -x is given, COMMAND is run after all job specifications
    that appear in ARGS have been replaced with the process ID of that job's
    process group leader.
By default, removes each JOBSPEC argument from the table of active jobs.
    If the -h option is given, the job is not removed from the table, but is
    marked so that SIGHUP is not sent to the job if the shell receives a
    SIGHUP.  The -a option, when JOBSPEC is not supplied, means to remove all
    jobs from the job table; the -r option means to remove only running jobs.
Send the processes named by PID (or JOBSPEC) the signal SIGSPEC.  If
    SIGSPEC is not present, then SIGTERM is assumed.  An argument of `-l'
    lists the signal names; if arguments follow `-l' they are assumed to
    be signal numbers for which names should be listed.  Kill is a shell
    builtin for two reasons: it allows job IDs to be used instead of
    process IDs, and, if you have reached the limit on processes that
    you can create, you don't have to start a process to kill another one.
Each ARG is an arithmetic expression to be evaluated.  Evaluation
    is done in fixed-width integers with no check for overflow, though
    division by 0 is trapped and flagged as an error.  The following
    list of operators is grouped into levels of equal-precedence operators.
    The levels are listed in order of decreasing precedence.
    
    
id++, id--
variable post-increment, post-decrement
    
++id, --id
variable pre-increment, pre-decrement
    
-, +
unary minus, plus
    
!, ~
logical and bitwise negation
    
exponentiation
    
*, /, %
multiplication, division, remainder
    
+, -
addition, subtraction
    
<<, >>
left and right bitwise shifts
    
<=, >=, <, >
comparison
    
==, !=
equality, inequality
    
bitwise AND
    
bitwise XOR
    
bitwise OR
    
logical AND
    
logical OR
    
expr ? expr : expr
    
conditional operator
    
=, *=, /=, %=,
    
+=, -=, <<=, >>=,
    
&=, ^=, |=
assignment
    
    Shell variables are allowed as operands.  The name of the variable
    is replaced by its value (coerced to a fixed-width integer) within
    an expression.  The variable need not have its integer attribute
    turned on to be used in an expression.
    
    Operators are evaluated in order of precedence.  Sub-expressions in
    parentheses are evaluated first and may override the precedence
    rules above.
    
    If the last ARG evaluates to 0, let returns 1; 0 is returned
    otherwise.
One line is read from the standard input, or from file descriptor FD if the
    -u option is supplied, and the first word is assigned to the first NAME,
    the second word to the second NAME, and so on, with leftover words assigned
    to the last NAME.  Only the characters found in $IFS are recognized as word
    delimiters.  If no NAMEs are supplied, the line read is stored in the REPLY
    variable.  If the -r option is given, this signifies `raw' input, and
    backslash escaping is disabled.  The -d option causes read to continue
    until the first character of DELIM is read, rather than newline.  If the -p
    option is supplied, the string PROMPT is output without a trailing newline
    before attempting to read.  If -a is supplied, the words read are assigned
    to sequential indices of ARRAY, starting at zero.  If -e is supplied and
    the shell is interactive, readline is used to obtain the line.  If -n is
    supplied with a non-zero NCHARS argument, read returns after NCHARS
    characters have been read.  The -s option causes input coming from a
    terminal to not be echoed.
    
    The -t option causes read to time out and return failure if a complete line
    of input is not read within TIMEOUT seconds.  If the TMOUT variable is set,
    its value is the default timeout.  The return code is zero, unless end-of-file
    is encountered, read times out, or an invalid file descriptor is supplied as
    the argument to -u.
Causes a function to exit with the return value specified by N.  If N
    is omitted, the return status is that of the last command.
    -a  Mark variables which are modified or created for export.
        -b  Notify of job termination immediately.
        -e  Exit immediately if a command exits with a non-zero status.
        -f  Disable file name generation (globbing).
        -h  Remember the location of commands as they are looked up.
        -k  All assignment arguments are placed in the environment for a
            command, not just those that precede the command name.
        -m  Job control is enabled.
        -n  Read commands but do not execute them.
        -o option-name
            Set the variable corresponding to option-name:
                allexport    same as -a
                braceexpand  same as -B
                emacs        use an emacs-style line editing interface
                errexit      same as -e
                errtrace     same as -E
                functrace    same as -T
                hashall      same as -h
                histexpand   same as -H
                history      enable command history
                ignoreeof    the shell will not exit upon reading EOF
                interactive-comments
                             allow comments to appear in interactive commands
                keyword      same as -k
                monitor      same as -m
                noclobber    same as -C
                noexec       same as -n
                noglob       same as -f
                nolog        currently accepted but ignored
                notify       same as -b
                nounset      same as -u
                onecmd       same as -t
                physical     same as -P
                pipefail     the return value of a pipeline is the status of
                             the last command to exit with a non-zero status,
                             or zero if no command exited with a non-zero status
                posix        change the behavior of bash where the default
                             operation differs from the 1003.2 standard to
                             match the standard
                privileged   same as -p
                verbose      same as -v
                vi           use a vi-style line editing interface
                xtrace       same as -x
        -p  Turned on whenever the real and effective user ids do not match.
            Disables processing of the $ENV file and importing of shell
            functions.  Turning this option off causes the effective uid and
            gid to be set to the real uid and gid.
        -t  Exit after reading and executing one command.
        -u  Treat unset variables as an error when substituting.
        -v  Print shell input lines as they are read.
        -x  Print commands and their arguments as they are executed.
        -B  the shell will perform brace expansion
        -C  If set, disallow existing regular files to be overwritten
            by redirection of output.
        -E  If set, the ERR trap is inherited by shell functions.
        -H  Enable ! style history substitution.  This flag is on
            by default when the shell is interactive.
        -P  If set, do not follow symbolic links when executing commands
            such as cd which change the current directory.
        -T  If set, the DEBUG trap is inherited by shell functions.
        -   Assign any remaining arguments to the positional parameters.
            The -x and -v options are turned off.
    
    Using + rather than - causes these flags to be turned off.  The
    flags can also be used upon invocation of the shell.  The current
    set of flags may be found in $-.  The remaining n ARGs are positional
    parameters and are assigned, in order, to $1, $2, .. $n.  If no
    ARGs are given, all shell variables are printed.
For each NAME, remove the corresponding variable or function.  Given
    the `-v', unset will only act on variables.  Given the `-f' flag,
    unset will only act on functions.  With neither flag, unset first
    tries to unset a variable, and if that fails, then tries to unset a
    function.  Some variables cannot be unset; also see readonly.
NAMEs are marked for automatic export to the environment of
    subsequently executed commands.  If the -f option is given,
    the NAMEs refer to functions.  If no NAMEs are given, or if `-p'
    is given, a list of all names that are exported in this shell is
    printed.  An argument of `-n' says to remove the export property
    from subsequent NAMEs.  An argument of `--' disables further option
    processing.
The given NAMEs are marked readonly and the values of these NAMEs may
    not be changed by subsequent assignment.  If the -f option is given,
    then functions corresponding to the NAMEs are so marked.  If no
    arguments are given, or if `-p' is given, a list of all readonly names
    is printed.  The `-a' option means to treat each NAME as
    an array variable.  An argument of `--' disables further option
    processing.
The positional parameters from $N+1 ... are renamed to $1 ...  If N is
    not given, it is assumed to be 1.
Read and execute commands from FILENAME and return.  The pathnames
    in $PATH are used to find the directory containing FILENAME.  If any
    ARGUMENTS are supplied, they become the positional parameters when
    FILENAME is executed.
Suspend the execution of this shell until it receives a SIGCONT
    signal.  The `-f' if specified says not to complain about this
    being a login shell if it is; just suspend anyway.
Exits with a status of 0 (true) or 1 (false) depending on
    the evaluation of EXPR.  Expressions may be unary or binary.  Unary
    expressions are often used to examine the status of a file.  There
    are string operators as well, and numeric comparison operators.
    
    File operators:
    
        -a FILE        True if file exists.
        -b FILE        True if file is block special.
        -c FILE        True if file is character special.
        -d FILE        True if file is a directory.
        -e FILE        True if file exists.
        -f FILE        True if file exists and is a regular file.
        -g FILE        True if file is set-group-id.
        -h FILE        True if file is a symbolic link.
        -L FILE        True if file is a symbolic link.
        -k FILE        True if file has its `sticky' bit set.
        -p FILE        True if file is a named pipe.
        -r FILE        True if file is readable by you.
        -s FILE        True if file exists and is not empty.
        -S FILE        True if file is a socket.
        -t FD          True if FD is opened on a terminal.
        -u FILE        True if the file is set-user-id.
        -w FILE        True if the file is writable by you.
        -x FILE        True if the file is executable by you.
        -O FILE        True if the file is effectively owned by you.
        -G FILE        True if the file is effectively owned by your group.
        -N FILE        True if the file has been modified since it was last read.
    
      FILE1 -nt FILE2  True if file1 is newer than file2 (according to
                       modification date).
    
      FILE1 -ot FILE2  True if file1 is older than file2.
    
      FILE1 -ef FILE2  True if file1 is a hard link to file2.
    
    String operators:
    
        -z STRING      True if string is empty.
    
        -n STRING
        STRING         True if string is not empty.
    
        STRING1 = STRING2
                       True if the strings are equal.
        STRING1 != STRING2
                       True if the strings are not equal.
        STRING1 < STRING2
                       True if STRING1 sorts before STRING2 lexicographically.
        STRING1 > STRING2
                       True if STRING1 sorts after STRING2 lexicographically.
    
    Other operators:
    
        -o OPTION      True if the shell option OPTION is enabled.
        ! EXPR         True if expr is false.
        EXPR1 -a EXPR2 True if both expr1 AND expr2 are true.
        EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.
    
        arg1 OP arg2   Arithmetic tests.  OP is one of -eq, -ne,
                       -lt, -le, -gt, or -ge.
    
    Arithmetic binary operators return true if ARG1 is equal, not-equal,
    less-than, less-than-or-equal, greater-than, or greater-than-or-equal
    than ARG2.
This is a synonym for the "test" builtin, but the last
    argument must be a literal `]', to match the opening `['.
Print the accumulated user and system times for processes run from
    the shell.
The command ARG is to be read and executed when the shell receives
    signal(s) SIGNAL_SPEC.  If ARG is absent (and a single SIGNAL_SPEC
    is supplied) or `-', each specified signal is reset to its original
    value.  If ARG is the null string each SIGNAL_SPEC is ignored by the
    shell and by the commands it invokes.  If a SIGNAL_SPEC is EXIT (0)
    the command ARG is executed on exit from the shell.  If a SIGNAL_SPEC
    is DEBUG, ARG is executed after every simple command.  If the`-p' option
    is supplied then the trap commands associated with each SIGNAL_SPEC are
    displayed.  If no arguments are supplied or if only `-p' is given, trap
    prints the list of commands associated with each signal.  Each SIGNAL_SPEC
    is either a signal name in <signal.h> or a signal number.  Signal names
    are case insensitive and the SIG prefix is optional.  `trap -l' prints
    a list of signal names and their corresponding numbers.  Note that a
    signal can be sent to the shell with "kill -signal $$".
For each NAME, indicate how it would be interpreted if used as a
    command name.
    
    If the -t option is used, `type' outputs a single word which is one of
    `alias', `keyword', `function', `builtin', `file' or `', if NAME is an
    alias, shell reserved word, shell function, shell builtin, disk file,
    or unfound, respectively.
    
    If the -p flag is used, `type' either returns the name of the disk
    file that would be executed, or nothing if `type -t NAME' would not
    return `file'.
    
    If the -a flag is used, `type' displays all of the places that contain
    an executable named `file'.  This includes aliases, builtins, and
    functions, if and only if the -p flag is not also used.
    
    The -f flag suppresses shell function lookup.
    
    The -P flag forces a PATH search for each NAME, even if it is an alias,
    builtin, or function, and returns the name of the disk file that would
    be executed.
Ulimit provides control over the resources available to processes
    started by the shell, on systems that allow such control.  If an
    option is given, it is interpreted as follows:
    
        -S
use the `soft' resource limit
        -H
use the `hard' resource limit
        -a
all current limits are reported
        -c
the maximum size of core files created
        -d
the maximum size of a process's data segment
        -e
the maximum scheduling priority (`nice')
        -f
the maximum size of files written by the shell and its children
        -i
the maximum number of pending signals
        -l
the maximum size a process may lock into memory
        -m
the maximum resident set size
        -n
the maximum number of open file descriptors
        -p
the pipe buffer size
        -q
the maximum number of bytes in POSIX message queues
        -r
the maximum real-time scheduling priority
        -s
the maximum stack size
        -t
the maximum amount of cpu time in seconds
        -u
the maximum number of user processes
        -v
the size of virtual memory
        -x
the maximum number of file locks
    
    If LIMIT is given, it is the new value of the specified resource;
    the special LIMIT values `soft', `hard', and `unlimited' stand for
    the current soft limit, the current hard limit, and no limit, respectively.
    Otherwise, the current value of the specified resource is printed.
    If no option is given, then -f is assumed.  Values are in 1024-byte
    increments, except for -t, which is in seconds, -p, which is in
    increments of 512 bytes, and -u, which is an unscaled number of
    processes.
The user file-creation mask is set to MODE.  If MODE is omitted, or if
    `-S' is supplied, the current value of the mask is printed.  The `-S'
    option makes the output symbolic; otherwise an octal number is output.
    If `-p' is supplied, and MODE is omitted, the output is in a form
    that may be used as input.  If MODE begins with a digit, it is
    interpreted as an octal number, otherwise it is a symbolic mode string
    like that accepted by chmod(1).
Wait for the specified process and report its termination status.  If
    N is not given, all currently active child processes are waited for,
    and the return code is zero.  N may be a process ID or a job
    specification; if a job spec is given, all processes in the job's
    pipeline are waited for.
The `for' loop executes a sequence of commands for each member in a
    list of items.  If `in WORDS ...;' is not present, then `in "$@"' is
    assumed.  For each element in WORDS, NAME is set to that element, and
    the COMMANDS are executed.
Equivalent to
    
(( EXP1 ))
    
while (( EXP2 )); do
    
COMMANDS
    
(( EXP3 ))
    
done
    EXP1, EXP2, and EXP3 are arithmetic expressions.  If any expression is
    omitted, it behaves as if it evaluates to 1.
The WORDS are expanded, generating a list of words.  The
    set of expanded words is printed on the standard error, each
    preceded by a number.  If `in WORDS' is not present, `in "$@"'
    is assumed.  The PS3 prompt is then displayed and a line read
    from the standard input.  If the line consists of the number
    corresponding to one of the displayed words, then NAME is set
    to that word.  If the line is empty, WORDS and the prompt are
    redisplayed.  If EOF is read, the command completes.  Any other
    value read causes NAME to be set to null.  The line read is saved
    in the variable REPLY.  COMMANDS are executed after each selection
    until a break command is executed.
Execute PIPELINE and print a summary of the real time, user CPU time,
    and system CPU time spent executing PIPELINE when it terminates.
    The return status is the return status of PIPELINE.  The `-p' option
    prints the timing summary in a slightly different format.  This uses
    the value of the TIMEFORMAT variable as the output format.
Selectively execute COMMANDS based upon WORD matching PATTERN.  The
    `|' is used to separate multiple patterns.
The `if COMMANDS' list is executed.  If its exit status is zero, then the
    `then COMMANDS' list is executed.  Otherwise, each `elif COMMANDS' list is
    executed in turn, and if its exit status is zero, the corresponding
    `then COMMANDS' list is executed and the if command completes.  Otherwise,
    the `else COMMANDS' list is executed, if present.  The exit status of the
    entire construct is the exit status of the last command executed, or zero
    if no condition tested true.
Expand and execute COMMANDS as long as the final command in the
    `while' COMMANDS has an exit status of zero.
Expand and execute COMMANDS as long as the final command in the
    `until' COMMANDS has an exit status which is not zero.
Create a simple command invoked by NAME which runs COMMANDS.
    Arguments on the command line along with NAME are passed to the
    function as $0 .. $n.
Run a set of commands in a group.  This is one way to redirect an
    entire set of commands.
Equivalent to the JOB_SPEC argument to the `fg' command.  Resume a
    stopped or background job.  JOB_SPEC can specify either a job name
    or a job number.  Following JOB_SPEC with a `&' places the job in
    the background, as if the job specification had been supplied as an
    argument to `bg'.
The EXPRESSION is evaluated according to the rules for arithmetic
    evaluation.  Equivalent to "let EXPRESSION".
Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators
    
    
( EXPRESSION )
Returns the value of EXPRESSION
    
! EXPRESSION
True if EXPRESSION is false; else false
    
EXPR1 && EXPR2
True if both EXPR1 and EXPR2 are true; else false
    
EXPR1 || EXPR2
True if either EXPR1 or EXPR2 is true; else false
    
    When the `==' and `!=' operators are used, the string to the right of the
    operator is used as a pattern and pattern matching is performed.  The
    && and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.
BASH_VERSION
Version information for this Bash.
    CDPATH
A colon-separated list of directories to search
    
for directries given as arguments to `cd'.
    GLOBIGNORE
A colon-separated list of patterns describing filenames to
    
be ignored by pathname expansion.
    HISTFILE
The name of the file where your command history is stored.
    HISTFILESIZE
The maximum number of lines this file can contain.
    HISTSIZE
The maximum number of history lines that a running
    
shell can access.
    HOME
The complete pathname to your login directory.
    HOSTNAME
The name of the current host.
    HOSTTYPE
The type of CPU this version of Bash is running under.
    IGNOREEOF
Controls the action of the shell on receipt of an EOF
    
character as the sole input.  If set, then the value
    
of it is the number of EOF characters that can be seen
    
in a row on an empty line before the shell will exit
    
(default 10).  When unset, EOF signifies the end of input.
    MACHTYPE
A string describing the current system Bash is running on.
    MAILCHECK
How often, in seconds, Bash checks for new mail.
    MAILPATH
A colon-separated list of filenames which Bash checks
    
for new mail.
    OSTYPE
The version of Unix this version of Bash is running on.
    PATH
A colon-separated list of directories to search when
    
looking for commands.
    PROMPT_COMMAND
A command to be executed before the printing of each
    
primary prompt.
    PS1
The primary prompt string.
    PS2
The secondary prompt string.
    PWD
The full pathname of the current directory.
    SHELLOPTS
A colon-separated list of enabled shell options.
    TERM
The name of the current terminal type.
    TIMEFORMAT
The output format for timing statistics displayed by the
    
`time' reserved word.
    auto_resume
Non-null means a command word appearing on a line by
    
itself is first looked for in the list of currently
    
stopped jobs.  If found there, that job is foregrounded.
    
A value of `exact' means that the command word must
    
exactly match a command in the list of stopped jobs.  A
    
value of `substring' means that the command word must
    
match a substring of the job.  Any other value means that
    
the command must be a prefix of a stopped job.
    histchars
Characters controlling history expansion and quick
    
substitution.  The first character is the history
    
substitution character, usually `!'.  The second is
    
the `quick substitution' character, usually `^'.  The
    
third is the `history comment' character, usually `#'.
    HISTIGNORE
A colon-separated list of patterns used to decide which
    
commands should be saved on the history list.
Adds a directory to the top of the directory stack, or rotates
    the stack, making the new top of the stack the current working
    directory.  With no arguments, exchanges the top two directories.
    
    +N
Rotates the stack so that the Nth directory (counting
    
from the left of the list shown by `dirs', starting with
    
zero) is at the top.
    
    -N
Rotates the stack so that the Nth directory (counting
    
from the right of the list shown by `dirs', starting with
    
zero) is at the top.
    
    -n
suppress the normal change of directory when adding directories
    
to the stack, so only the stack is manipulated.
    
    dir
adds DIR to the directory stack at the top, making it the
    
new current working directory.
    
    You can see the directory stack with the `dirs' command.
Removes entries from the directory stack.  With no arguments,
    removes the top directory from the stack, and cd's to the new
    top directory.
    
    +N
removes the Nth entry counting from the left of the list
    
shown by `dirs', starting with zero.  For example: `popd +0'
    
removes the first directory, `popd +1' the second.
    
    -N
removes the Nth entry counting from the right of the list
    
shown by `dirs', starting with zero.  For example: `popd -0'
    
removes the last directory, `popd -1' the next to last.
    
    -n
suppress the normal change of directory when removing directories
    
from the stack, so only the stack is manipulated.
    
    You can see the directory stack with the `dirs' command.
Display the list of currently remembered directories.  Directories
    find their way onto the list with the `pushd' command; you can get
    back up through the list with the `popd' command.
    
    The -l flag specifies that `dirs' should not print shorthand versions
    of directories which are relative to your home directory.  This means
    that `~/bin' might be displayed as `/homes/bfox/bin'.  The -v flag
    causes `dirs' to print the directory stack with one entry per line,
    prepending the directory name with its position in the stack.  The -p
    flag does the same thing, but the stack position is not prepended.
    The -c flag clears the directory stack by deleting all of the elements.
    
    +N
displays the Nth entry counting from the left of the list shown by
    
dirs when invoked without options, starting with zero.
    
    -N
displays the Nth entry counting from the right of the list shown by
    
dirs when invoked without options, starting with zero.
Toggle the values of variables controlling optional behavior.
    The -s flag means to enable (set) each OPTNAME; the -u flag
    unsets each OPTNAME.  The -q flag suppresses output; the exit
    status indicates whether each OPTNAME is set or unset.  The -o
    option restricts the OPTNAMEs to those defined for use with
    `set -o'.  With no options, or with the -p option, a list of all
    settable options is displayed, with an indication of whether or
    not each is set.
printf formats and prints ARGUMENTS under control of the FORMAT. FORMAT
    is a character string which contains three types of objects: plain
    characters, which are simply copied to standard output, character escape
    sequences which are converted and copied to the standard output, and
    format specifications, each of which causes printing of the next successive
    argument.  In addition to the standard printf(1) formats, %b means to
    expand backslash escape sequences in the corresponding argument, and %q
    means to quote the argument in a way that can be reused as shell input.
    If the -v option is supplied, the output is placed into the value of the
    shell variable VAR rather than being sent to the standard output.
For each NAME, specify how arguments are to be completed.
    If the -p option is supplied, or if no options are supplied, existing
    completion specifications are printed in a way that allows them to be
    reused as input.  The -r option removes a completion specification for
    each NAME, or, if no NAMEs are supplied, all completion specifications.
Display the possible completions depending on the options.  Intended
    to be used from within a shell function generating possible completions.
    If the optional WORD argument is supplied, matches against WORD are
    generated.
%s %s
NULL
%s %s %s
HOME not set
OLDPWD not set
CDPATH
%s: %s
OLDPWD=
PWD=
chdir
command_builtin
%s: 
line %d: 
%s: usage: 
too many arguments
%s: numeric argument required
%s: not found
%s: invalid option name
%s: invalid number
%s: invalid signal specification
`%s': not a pid or valid job spec
%s: readonly variable
%s: %s out of range
argument
%s out of range
%s: no such job
%s: no job control
no job control
%s: restricted
%s: not a shell builtin
write error: %s
%s: error retrieving current directory: %s: %s
%s: ambiguous job spec
SIGJUNK
Unknown
%2d) %s
warning: -F option may not work as you expect
warning: -C option may not work as you expect
abcdefgjko:prsuvA:G:W:P:S:X:F:C:
%s: invalid action name
bashdefault
default
dirnames
filenames
nospace
plusdirs
arrayvar
binding
directory
disabled
enabled
file
helptopic
hostname
group
keyword
running
service
setopt
signal
stopped
user
variable
%s: no completion specification
complete 
-o %s 
-A %s 
%s %s 
can only be used in a function
+afiprtxF
cannot use `-f' to make functions
%s: readonly function
%s %d %s
%s: cannot destroy array variables in this way
adnpsf:
enable %s
enable -n %s
cannot open shared object %s: %s
cannot find %s in shared object %s: %s
%s: not dynamically loaded
%s: cannot delete: %s
BASH_ARGV
BASH_ARGC
%s: not a regular file
%s: file is too large
_evalfile
parse_and_execute_top
pe_dispose
parse_and_execute
%s: ignoring function definition attempt
cla:
%s: cannot execute: %s
logout
exit
not login shell: use `exit'
~/.bash_logout
There are stopped jobs.
:e:lnrs
no command found
history specification
bash-fc
%s: cannot open temp file: %s
%s %s
${FCEDIT:-${EDITOR:-ed}}
${FCEDIT:-${EDITOR:-vi}}
fc builtin
current
job %d started without job control
%s: illegal option -- %c
%s: option requires an argument -- %c
OPTIND
OPTARG
hashing disabled
dlp:rt
%s: hash table empty
builtin hash -p %s %s
hits
command
Shell commands matching keywords `
Shell commands matching keyword `
%s: %s
no help topics match `%s'.  Try `help help' or `man -k %s' or `info %s'.
%s: cannot open: %s
%*s%s
These shell commands are defined internally.  Type `help' to see this list.
Type `help name' to find out more about the function `name'.
Use `info bash' to find out more about the shell in general.
Use `man -k' or `info' to find out more about commands not in this list.
A star (*) next to a name means that the command is disabled.
acd:npsrw
cannot use more than one of -anrw
history position
HISTTIMEFORMAT
%5d%c %s%s
%s: history expansion failed
lpnxrs
no other options allowed with `-x'
jobs_builtin
%s: arguments must be process or job IDs
Unknown error
(%ld) - %s
expression expected
#'-+ 0
hjlLtz
`%s': missing format character
`%c': invalid format character
missing hex digit for \x
warning: %s: %s
no other directory
<no current directory>
%2d  %s
%2d  %s
dirstack
directory stack empty
directory stack index
ersa:d:n:p:t:u:
%s: invalid timeout specification
%s: invalid file descriptor specification
%d: invalid file descriptor: %s
TMOUT
read_builtin
read error: %d: %s
REPLY
can only `return' from a function or sourced script
allexport
braceexpand
errexit
errtrace
functrace
hashall
histexpand
ignoreeof
interactive-comments
monitor
noclobber
noexec
noglob
nolog
notify
nounset
onecmd
physical
pipefail
privileged
xtrace
SHELLOPTS
cannot simultaneously unset a function and a variable
%s: cannot unset
%s: cannot unset: readonly %s
%s: not an array variable
%-15s
set %co %s
IGNOREEOF
editing-mode
stdin
afnp
%s: not a function
declare -%s 
%s -%s 
shift count
psuoq
cannot set and unset shell options simultaneously
cdable_vars
cdspell
checkhash
checkwinsize
cmdhist
compat31
dotglob
execfail
expand_aliases
extdebug
extglob
extquote
failglob
force_fignore
gnu_errfmt
histappend
histreedit
histverify
hostcomplete
huponexit
interactive_comments
lithist
login_shell
mailwarn
no_empty_cmd_completion
nocaseglob
nocasematch
nullglob
progcomp
promptvars
restricted_shell
shift_verbose
sourcepath
xpg_echo
%s: invalid shell option name
shopt %s %s
filename argument required
%s: file not found
cannot suspend
cannot suspend a login shell
missing `]'
unknown
trap -- %s %d
trap -- %s %s
-type
path
-path
-all
afptP
%s is aliased to `%s'
alias %s=%s
%s is a shell keyword
%s is a function
%s is a shell builtin
%s is %s
%s is hashed (%s)
`%c': bad command
core file size
blocks
data seg size
kbytes
file size
max locked memory
max memory size
open files
pipe size
512 bytes
stack size
cpu time
seconds
max user processes
virtual memory
%s: cannot get limit: %s
hard
soft
unlimited
limit
%s: cannot modify limit: %s
(%s, -%c) 
(-%c) 
%-20s %16s
octal number
umask%s 
%04lo
agou
`%c': invalid symbolic mode operator
`%c': invalid symbolic mode character
u=%s,g=%s,o=%s
dispose_command
last command: %s
(null)
Aborting...
%s: warning: 
: %s
%s: %s:%s%d: 
 line 
%s:%s%d: 
%s: %s: %d
%s: unbound variable
unknown command error
bad command type
bad connector
bad jump
reader_loop
PROMPT_COMMAND
eterm
timed out waiting for input: auto-logout
execute-command
loop_redirections
execute_command
execute-shell-function
%s: %s: bad interpreter
real %2R
user %2U
sys %2S
TIMEFORMAT
real
%3lR
user
%3lU
%3lS
TIMEFORMAT: `%c': invalid format character
cannot duplicate fd %d to fd %d
/dev/null
cannot redirect standard input from /dev/null: %s
execute_connection
pipe error
pipe-file-descriptors
LINES
COLUMNS
%*d%s%s
execute_cond_node
simple-command
auto_resume
exact
substring
eval_builtin
builtin_env
return_temp_env
saved redirects
saved_redirects
%s: restricted: cannot specify `/' in command names
%s: command not found
function_calling
syntax error in expression
expression recursion level exceeded
*/%+-&^|
syntax error: operand expected
syntax error: invalid arithmetic operator
invalid number
invalid arithmetic base
value too great for base
attempted assignment to non-variable
division by 0
bug: bad expassign token
`:' expected for conditional expression
exponent less than 0
identifier expected after pre-increment or pre-decrement
missing `)'
%s%s%s: %s (error token is "%s")
recursion stack underflow
cannot allocate new file descriptor for bash input from fd %d
save_bash_input: buffer already exists for new fd %d
deleting stopped job %d with process group %ld
[%d] %ld
describe_pid: %ld: no such pid
fork
child setpgid (%ld to %ld)
[%ld: %d] tcsetattr
wait: pid %ld is not a child of this shell
wait_for: No record of process %ld
wait_for_job: job %d is stopped
%s: job has terminated
%s: job %d already in background
[%d]%s
(wd: %s)
initialize_job_control: getpgrp failed
initialize_job_control: setpgid
no job control in this shell
job-working-directory
<unknown>
[%d]%c 
     
%5ld
(core dumped) 
  (wd: %s)
Done
Stopped
Stopped(%s)
Running
Done(%d)
Exit %d
Unknown status
Signal %d
forked pid %d appears in running job %d
SIGCHLD trap
%s: line %d: 
 (core dumped)
(wd now: %s)
notify_of_job_status
BASH
/usr/share/locale
LC_CTYPE
LC_COLLATE
LC_MESSAGES
LC_NUMERIC
LC_TIME
TEXTDOMAIN
TEXTDOMAINDIR
LC_ALL
LANG
POSIX
#: %s:%d
msgid %s%s
msgstr ""
"%s"
MAILCHECK
MAILPATH
MAIL
You have mail in $_
You have new mail in $_
The mail in %s has been read
syntax error: arithmetic expression required
syntax error: `;' unexpected
syntax error: `((%s))'
make_here_document: bad instruction type %d
make_redirection: redirection instruction `%d' out of range
clean_simple_command
"$@"
syntax error
readline stdin
then
else
elif
esac
done
newline
%a %b %d
%H:%M:%S
%I:%M:%S
%I:%M %p
%H:%M
%s.%d
PIPESTATUS
maximum here-document count exceeded
syntax error near unexpected token `%s'
syntax error near `%s'
syntax error: unexpected end of file
`%s'
Use "%s" to leave the shell.
unexpected token `%s', expected `)'
expected `)'
unexpected argument `%s' to conditional unary operator
unexpected argument to conditional unary operator
unexpected token `%s', conditional binary operator expected
conditional binary operator expected
unexpected argument `%s' to conditional binary operator
unexpected argument to conditional binary operator
unexpected token `%c' in conditional command
unexpected token `%s' in conditional command
unexpected token %d in conditional command
unexpected EOF while looking for `]]'
syntax error in conditional expression: unexpected token `%s'
syntax error in conditional expression
unexpected EOF while looking for matching `%c'
unexpected EOF while looking for matching `)'
GLOBIGNORE
completion: function `%s' not found
COMPREPLY
COMP_LINE
COMP_POINT
COMP_CWORD
COMP_WORDS
progcomp_insert: %s: NULL COMPSPEC
%s=(%s)
''%s
for %s in 
select %s in 
case %s in 
case %s in
 %s 
time 
 && 
 || 
print_command: bad connector `%d'
print_command
 then
else
function %s () 
> %s
< %s
>> %s
<<%s%s
<<< %s
%d<&%d
%d>&%d
%d<&%s
%d>&%s
%d<&%d-
%d>&%d-
%d<&%s-
%d>&%s-
%d>&-
>&%s
<> %s
>|%s
cprintf: `%c': invalid format character
file descriptor out of range
%s: ambiguous redirect
%s: cannot overwrite existing file
%s: restricted: cannot redirect output
cannot create temp file for here document: %s
/dev/tcp/*/*
/dev/udp/*/*
redirection error: cannot duplicate fd
sh-thd
cannot make pipe for command substitution
cannot make child for command substitution
command_substitute: cannot duplicate pipe as fd 1
command substitution
bad substitution: no closing `%s' in %s
%s: cannot assign list to array member
bad substitution: no closing "`" in %s
cannot make pipe for process substitution
cannot make child for process substitution
cannot duplicate named pipe %s as fd %d
process substitution
/dev/fd/
#%:-=?+/}
%:=+/
%s: bad substitution
$%s: cannot assign in this way
%s: substring expression < 0
%s: parameter null or not set
no match: %s
%s: integer expression expected
%s: unary operator expected
%s: binary operator expected
argument expected
`)' expected
`)' expected, found %s
EXIT
SIGHUP
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGABRT
SIGEMT
SIGFPE
SIGKILL
SIGBUS
SIGSEGV
SIGSYS
SIGPIPE
SIGALRM
SIGTERM
SIGURG
SIGSTOP
SIGTSTP
SIGCONT
SIGCHLD
SIGTTIN
SIGTTOU
SIGIO
SIGXCPU
SIGXFSZ
SIGVTALRM
SIGPROF
SIGWINCH
SIGINFO
SIGUSR1
SIGUSR2
DEBUG
RETURN
invalid signal number
run_pending_traps: bad value in trap_list[%d]: %p
run_pending_traps: signal handler is SIG_DFL, resending %d (%s) to myself
trap_handler: bad signal %d
exit trap
debug trap
error trap
return trap
interrupt trap
BASH_FUNC_
() {
error importing function definition for `%s'
/usr/gnu/bin:/usr/local/bin:/bin:/usr/bin:.
OPTERR
BASH_VERSION
BASH_EXECUTION_STRING
~/.sh_history
~/.bash_history
SHLVL
shell level (%d) too high, resetting to 1
shell-init
PPID
make_local_variable: no function context at current scope
all_local_variables: no function context at current scope
pop_var_context: head of shell_variables not a function context
pop_var_context: no global_variables context
pop_scope: head of shell_variables not a temporary environment scope
ignorespace
ignoredups
ignoreboth
erasedups
HOSTTYPE
x86_64
OSTYPE
darwin15
MACHTYPE
HOSTNAME
EUID
BASH_VERSINFO
BASH_COMMAND
BASH_SUBSHELL
RANDOM
LINENO
HISTCMD
COMP_WORDBREAKS
DIRSTACK
GROUPS
SECONDS
TERMCAP
TERMINFO
release
%s.%d(%d)-%s
%s.%d(%d)
GNU bash, version %s (%s)
Copyright (C) 2007 Free Software Foundation, Inc.
xmalloc: cannot allocate %lu bytes
xrealloc: cannot allocate %lu bytes
GETTEXT_LOG_UNTRANSLATED
LC_MONETARY
LC_XXX
LANGUAGE
domain 
msgid 
msgid_plural 
msgstr[0] ""
msgstr ""
plural=
nplurals=
C-\M-
INPUTRC
~/.inputrc
/etc/inputrc
Control-
CTRL-
Meta
other
no closing `"' in key binding
prefix-meta
none
\C-%c
\C-?
# %s (not bound)
"%s": %s
%s is not bound to any keys
%s can be found on 
set %s %s
%s is set to `%s'
unknown parser directive
endif
include
term=
mode=
$endif without matching $if
$else found without matching $if
readline: %s: line %d: %s
readline: %s
bind-tty-special-chars
blink-matching-paren
byte-oriented
convert-meta
disable-completion
enable-keypad
expand-tilde
history-preserve-point
horizontal-scroll-mode
input-meta
mark-directories
mark-modified-lines
mark-symlinked-directories
match-hidden-files
meta-flag
output-meta
page-completions
prefer-visible-bell
print-completions-horizontally
show-all-if-ambiguous
show-all-if-unmodified
visible-stats
bell-style
completion-query-items
isearch-terminators
keymap
audible
visible
Escape
Newline
Return
Rubout
Space
emacs-standard
emacs-meta
emacs-ctlx
vi-move
vi-command
vi-insert
"%s%s": "%s"
%s%s outputs %s
"\'`@$><=;|&{(
readline: bad value %d for what_to_do in rl_complete
--More--
Display all %d possibilities? (y or n)
readline: debug: insert_some_chars: count (%d) != col (%d)
abort
accept-line
arrow-key-prefix
backward-byte
backward-char
backward-delete-char
backward-kill-line
backward-kill-word
backward-word
beginning-of-history
beginning-of-line
call-last-kbd-macro
capitalize-word
character-search
character-search-backward
clear-screen
copy-backward-word
copy-forward-word
copy-region-as-kill
delete-char
delete-char-or-list
delete-horizontal-space
digit-argument
do-lowercase-version
downcase-word
dump-functions
dump-macros
dump-variables
emacs-editing-mode
end-kbd-macro
end-of-history
end-of-line
exchange-point-and-mark
forward-backward-delete-char
forward-byte
forward-char
forward-search-history
forward-word
history-search-backward
history-search-forward
insert-comment
insert-completions
kill-whole-line
kill-line
kill-region
kill-word
menu-complete
next-history
non-incremental-forward-search-history
non-incremental-reverse-search-history
non-incremental-forward-search-history-again
non-incremental-reverse-search-history-again
overwrite-mode
possible-completions
previous-history
quoted-insert
re-read-init-file
redraw-current-line
reverse-search-history
revert-line
self-insert
set-mark
start-kbd-macro
tab-insert
tilde-expand
transpose-chars
transpose-words
tty-status
undo
universal-argument
unix-filename-rubout
unix-line-discard
unix-word-rubout
upcase-word
yank
yank-last-arg
yank-nth-arg
yank-pop
vi-append-eol
vi-append-mode
vi-arg-digit
vi-back-to-indent
vi-bWord
vi-bword
vi-change-case
vi-change-char
vi-change-to
vi-char-search
vi-column
vi-complete
vi-delete
vi-delete-to
vi-eWord
vi-editing-mode
vi-end-word
vi-eof-maybe
vi-eword
vi-fWord
vi-fetch-history
vi-first-print
vi-fword
vi-goto-mark
vi-insert-beg
vi-insertion-mode
vi-match
vi-movement-mode
vi-next-word
vi-overstrike
vi-overstrike-delete
vi-prev-word
vi-put
vi-redo
vi-replace
vi-rubout
vi-search
vi-search-again
vi-set-mark
vi-subst
vi-tilde-expand
vi-yank-arg
vi-yank-to
;&()|<>
:$*%^
event not found
bad word specifier
substitution failed
unrecognized history modifier
no previous substitution
unknown expansion error
<>;&|$
\`"$
X%lu
(arg: %d) 
/-_=~.#$
 l|h^0bB
 l|hwW^0bB
 l|h^0%bB
_*\AaIiCcDdPpYyRrSsXx~
 hl^$0ftFT;,%wbeWBE|
/dev/std
invalid base
0123456789ABCDEF
0123456789abcdef
%s/cur
%s/tmp
%s/new
%s/%s
sh_makepath
%s: bad network path specification
socket
connect
BASH_REMATCH
%s%s
%ldm%d.%03ds
shtmp
%s/%s-%lu
TMPDIR
/var/tmp/
/tmp
/var/tmp
/usr/tmp
?*+@!
ascii
alnum
alpha
blank
cntrl
digit
graph
lower
print
punct
space
upper
word
xdigit
alert
backspace
vertical-tab
form-feed
carriage-return
exclamation-mark
quotation-mark
number-sign
dollar-sign
percent-sign
ampersand
apostrophe
left-parenthesis
right-parenthesis
asterisk
plus-sign
comma
hyphen
hyphen-minus
minus
dash
period
full-stop
slash
solidus
zero
three
four
five
seven
eight
nine
colon
semicolon
less-than-sign
equals-sign
greater-than-sign
question-mark
commercial-at
left-square-bracket
backslash
reverse-solidus
right-square-bracket
circumflex
circumflex-accent
underscore
grave-accent
left-brace
left-curly-bracket
vertical-line
right-brace
right-curly-bracket
tilde
 !"#$%&'()-
-0:41/65789
%+(.uv
zz}~z
z{ikt
zzzz
zzzzzz
EFzzzz
XopqrsOe`
zHQWzzzzfN
zzCDIJ
zhabzz
zzz^cd
]?@KL
677778899999999999999999999999999999:::;;<<====>>>>>>>>>>>????????@@@@AAAAAABBBCCCDDEFFFGHIJJJKKLLLLMMNNOPPQQQRRRRRRSSTTTUUVVVWWWWWXXXXXXYYZZ
@(#)PROGRAM:bash  PROJECT:bash-99
X@messages
/usr/share/locale
